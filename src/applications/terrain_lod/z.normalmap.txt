
// -------- normal calc after Strugar -------------

This belongs in TerrainCDLOD.cpp for normal map generation


/* static inline glm::vec3 avgNormalFromQuad( float ha, float hb, float hc, float hd,
		float sizex, float sizey, float scalez ) {
	glm::vec3 n0, n1;
	n0.x = -( hb - ha ) * scalez * sizey;
	n0.y = -sizex * ( hc - ha ) * scalez;
	n0.z = sizex * sizey;
	//n0 = glm::normalize( n0 );
	n1.x = -sizey * ( hd - hc ) * scalez;
	n1.y = ( ( hb - hc ) * sizex - sizex * ( hd - hc ) ) * scalez;
	n1.z = sizey * sizex;
	//n1 = glm::normalize( n1 );
	n0 += n1;
	//n0 = glm::normalize( n0 );
	return n0;
}

static inline int coordClamp( int val, int limit ) {
	if( val < 0 )
		return 0;
	if( val > limit - 1 )
		return limit - 1;
	return val;
}

static inline int coordWrap( int val, int limit ) {
	if( val < 0 )
		return limit + val;
	if( val > limit - 1 )
		return val - limit;
	return val;
}

static inline int coordFix( int val, int limit, bool wrap ) {
	if( wrap )
		return coordWrap( val, limit );
	else
		return coordClamp( val, limit );
}

static void createNormalMap( int sizeX, int sizeY, MapDimensions & mapDims, float * heightmapData, int heightmapDataPitch, unsigned int * normalmapData, int normalmapDataPitch, bool wrapEdges ) {
	float stepx = 1.0f / (sizeX-1) * mapDims.SizeX;
	float stepy = 1.0f / (sizeY-1) * mapDims.SizeY;
	const int smoothSteps = 0; // can be 0, 1, 2, ... more steps == slower algorithm
	for( int dist = 1; dist < 2+smoothSteps; dist++ ) {
		for( int y = 0; y < sizeY; y++ ) {
			float *hmScanLine0 = &heightmapData
					[coordFix(y-dist, sizeY, wrapEdges) * (heightmapDataPitch/sizeof(float))];
			float *hmScanLine1 = &heightmapData
					[coordFix(y+0, sizeY, wrapEdges) * (heightmapDataPitch/sizeof(float))];
			float *hmScanLine2 = &heightmapData
					[CoordFix(y+dist, sizeY, wrapEdges) * (heightmapDataPitch/sizeof(float))];
			unsigned int * nmScanLine = &normalmapData[y * (normalmapDataPitch/sizeof(unsigned int))];
			for( int x = 0; x < sizeX; x++ ) {
				int xcoordm = coordFix( x-dist, sizeX, wrapEdges );
				int xcoord = coordFix( x, sizeX, wrapEdges );
				int xcoordp = coordFix( x+dist, sizeX, wrapEdges );
				float ha = hmScanLine0[xcoordm];
				float hb = hmScanLine1[xcoordm];
				float hc = hmScanLine2[xcoordm];
				float hd = hmScanLine0[xcoord];
				float he = hmScanLine1[xcoord];
				float hf = hmScanLine2[xcoord];
				float hg = hmScanLine0[xcoordp];
				float hh = hmScanLine1[xcoordp];
				float hi = hmScanLine2[xcoordp];
				glm::vec3 norm( 0, 0, 0 );
				norm += AvgNormalFromQuad( ha, hb, hd, he, stepx, stepy, mapDims.SizeZ );
				norm += AvgNormalFromQuad( hb, hc, he, hf, stepx, stepy, mapDims.SizeZ );
				norm += AvgNormalFromQuad( hd, he, hg, hh, stepx, stepy, mapDims.SizeZ );
				norm += AvgNormalFromQuad( he, hf, hh, hi, stepx, stepy, mapDims.SizeZ );
				norm = glm::normalize( norm );
				if( dist > 1 ) {
					glm::vec3 oldNorm( ((nmScanLine[x] >> 16) / 65535.0f - 0.5f) / 0.5f,
									   ((nmScanLine[x] & 0xFFFF ) / 65535.0f - 0.5f) / 0.5f, 0.0f );
					oldNorm.z = sqrtf( 1 - oldNorm.x*oldNorm.x - oldNorm.y*oldNorm.y );
					// use bigger const to add more weight to normals calculated from smaller quads
					norm += oldNorm * 1.0f;
					norm = glm::normalize( norm );
				}
				unsigned short a = (unsigned short)clamp( 65535.0f * ( norm.x * 0.5f + 0.5f ),
						0.0f, 65535.0f );
				unsigned short b = (unsigned short)clamp( 65535.0f * ( norm.y * 0.5f + 0.5f ),
						0.0f, 65535.0f );
				nmScanLine[x] = (a << 16) | b;
			}
		}
	}
} */
