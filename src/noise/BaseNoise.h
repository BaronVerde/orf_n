
#pragma once

#include <noise/Generator.h>
#include <noise/Misc.h>

namespace noise {

/// Default frequency for the noise::module::RidgedMulti noise module.
const double DEFAULT_FREQUENCY{ 1.0 };

/// Default lacunarity for the noise::module::RidgedMulti noise module.
const double DEFAULT_LACUNARITY{ 2.0 };

/// Default persistence value for the noise::module::Perlin noise module.
const double DEFAULT_PERSISTENCE{ 0.5 };

/// Default number of octaves for the noise::module::RidgedMulti noise module.
const int DEFAULT_OCTAVE_COUNT{ 6 };

/// Default noise quality for the noise::module::RidgedMulti noise module.
const noiseQuality_t DEFAULT_QUALITY{ QUALITY_STD };

/// Default noise seed for the noise::module::RidgedMulti noise module.
const int DEFAULT_SEED{ 0 };

/// Maximum number of octaves for the noise::module::RidgedMulti noise module.
const int MAX_OCTAVE_COUNT{ 30 };


/// Abstract base class for noise modules.
///
/// A <i>noise module</i> is an object that calculates and outputs a value
/// given a three-dimensional input value.
///
/// Each type of noise module uses a specific method to calculate an
/// output value.  Some of these methods include:
///
/// - Calculating a value using a coherent-noise function or some other
///   mathematical function.
/// - Mathematically changing the output value from another noise module
///   in various ways.
/// - Combining the output values from two noise modules in various ways.
///
/// An application can use the output values from these noise modules in
/// the following ways:
///
/// - It can be used as an elevation value for a terrain height map
/// - It can be used as a grayscale (or an RGB-channel) value for a
///   procedural texture
/// - It can be used as a position value for controlling the movement of a
///   simulated lifeform.
///
/// A noise module defines a near-infinite 3-dimensional texture.  Each
/// position in this "texture" has a specific value.
///
/// <b>Combining noise modules</b>
///
/// Noise modules can be combined with other noise modules to generate
/// complex output values.  A noise module that is used as a source of
/// output values for another noise module is called a <i>source
/// module</i>.  Each of these source modules may be connected to other
/// source modules, and so on.
///
/// There is no limit to the number of noise modules that can be connected
/// together in this way.  However, each connected noise module increases
/// the time required to calculate an output value.
///
/// <b>Noise-module categories</b>
///
/// The noise module classes that are included in libnoise can be roughly
/// divided into five categories.
///
/// <i>Generator Modules</i>
///
/// A generator module outputs a value generated by a coherent-noise
/// function or some other mathematical function.
///
/// Examples of generator modules include:
/// - noise::module::Const: Outputs a constant value.
/// - noise::module::Perlin: Outputs a value generated by a Perlin-noise
///   function.
/// - noise::module::Voronoi: Outputs a value generated by a Voronoi-cell
///   function.
///
/// <i>Modifier Modules</i>
///
/// A modifer module mathematically modifies the output value from a
/// source module.
///
/// Examples of modifier modules include:
/// - noise::module::Curve: Maps the output value from the source module
///   onto an arbitrary function curve.
/// - noise::module::Invert: Inverts the output value from the source
///   module.
///
/// <i>Combiner Modules</i>
///
/// A combiner module mathematically combines the output values from two
/// or more source modules together.
///
/// Examples of combiner modules include:
/// - noise::module::Add: Adds the two output values from two source
///   modules.
/// - noise::module::Max: Outputs the larger of the two output values from
///   two source modules.
///
/// <i>Selector Modules</i>
///
/// A selector module uses the output value from a <i>control module</i>
/// to specify how to combine the output values from its source modules.
///
/// Examples of selector modules include:
/// - noise::module::Blend: Outputs a value that is linearly interpolated
///   between the output values from two source modules; the interpolation
///   weight is determined by the output value from the control module.
/// - noise::module::Select: Outputs the value selected from one of two
///   source modules chosen by the output value from a control module.
///
/// <i>Transformer Modules</i>
///
/// A transformer module applies a transformation to the coordinates of
/// the input value before retrieving the output value from the source
/// module.  A transformer module does not modify the output value.
///
/// Examples of transformer modules include:
/// - RotatePoint: Rotates the coordinates of the input value around the
///   origin before retrieving the output value from the source module.
/// - ScalePoint: Multiplies each coordinate of the input value by a
///   constant value before retrieving the output value from the source
///   module.
///
/// <b>Connecting source modules to a noise module</b>
///
/// An application connects a source module to a noise module by passing
/// the source module to the SetSourceModule() method.
///
/// The application must also pass an <i>index value</i> to
/// SetSourceModule() as well.  An index value is a numeric identifier for
/// that source module.  Index values are consecutively numbered starting
/// at zero.
///
/// To retrieve a reference to a source module, pass its index value to
/// the GetSourceModule() method.
///
/// Each noise module requires the attachment of a certain number of
/// source modules before it can output a value.  For example, the
/// noise::module::Add module requires two source modules, while the
/// noise::module::Perlin module requires none.  Call the
/// GetSourceModuleCount() method to retrieve the number of source modules
/// required by that module.
///
/// For non-selector modules, it usually does not matter which index value
/// an application assigns to a particular source module, but for selector
/// modules, the purpose of a source module is defined by its index value.
/// For example, consider the noise::module::Select noise module, which
/// requires three source modules.  The control module is the source
/// module assigned an index value of 2.  The control module determines
/// whether the noise module will output the value from the source module
/// assigned an index value of 0 or the output value from the source
/// module assigned an index value of 1.
///
/// <b>Generating output values with a noise module</b>
///
/// Once an application has connected all required source modules to a
/// noise module, the application can now begin to generate output values
/// with that noise module.
///
/// To generate an output value, pass the ( @a x, @a y, @a z ) coordinates
/// of an input value to the GetValue() method.
///
/// <b>Using a noise module to generate terrain height maps or textures</b>
///
/// One way to generate a terrain height map or a texture is to first
/// allocate a 2-dimensional array of floating-point values.  For each
/// array element, pass the array subscripts as @a x and @a y coordinates
/// to the GetValue() method (leaving the @a z coordinate set to zero) and
/// place the resulting output value into the array element.
///
/// <b>Creating your own noise modules</b>
///
/// Create a class that publicly derives from noise::module::Module.
///
/// In the constructor, call the base class' constructor while passing the
/// return value from GetSourceModuleCount() to it.
///
/// Override the GetSourceModuleCount() pure virtual method.  From this
/// method, return the number of source modules required by your noise
/// module.
///
/// Override the GetValue() pure virtual method.  For generator modules,
/// calculate and output a value given the coordinates of the input value.
/// For other modules, retrieve the output values from each source module
/// referenced in the protected @a m_pSourceModule array, mathematically
/// combine those values, and return the combined value.
///
/// When developing a noise module, you must ensure that your noise module
/// does not modify any source module or control module connected to it; a
/// noise module can only modify the output value from those source
/// modules.  You must also ensure that if an application fails to connect
/// all required source modules via the SetSourceModule() method and then
/// attempts to call the GetValue() method, your module will raise an
/// assertion.
///
/// It shouldn't be too difficult to create your own noise module.  If you
/// still have some problems, take a look at the source code for
/// noise::module::Add, which is a very simple noise module.

class BaseNoise {
public:
	BaseNoise( const double frequency = DEFAULT_FREQUENCY, const double lacunarity = DEFAULT_LACUNARITY,
		const double persistence = DEFAULT_PERSISTENCE,	const int octaveCount = DEFAULT_OCTAVE_COUNT,
		const noiseQuality_t quality = DEFAULT_QUALITY,	const int seed = DEFAULT_SEED ) :
		m_frequency{frequency}, m_lacunarity{lacunarity}, m_persistence{persistence},
		m_octaveCount{octaveCount}, m_quality{quality}, m_seed{seed} {}

	virtual double getValue( double x, double y, double z ) const = 0;

	virtual ~BaseNoise() {};

	virtual void setOctaveCount( const int octaveCount ) {
		m_octaveCount = octaveCount > MAX_OCTAVE_COUNT ? MAX_OCTAVE_COUNT : octaveCount;
	}

	virtual void setFrequency( const float frequency ) {
		m_frequency = frequency;
	}

	virtual void setPersistence( const float persistence ) {
		m_persistence = persistence;
	}

	virtual void setLacunarity( const float lacunarity ) {
		m_lacunarity = lacunarity;
	}

	virtual void setQuality( const noiseQuality_t quality ) {
		m_quality = quality;
	}

	virtual void setSeed( const int seed ) {
		m_seed = seed;
	}

	virtual void setBias( const float bias ) {
		m_bias = bias;
	}

	virtual void setScale( const float scale ) {
		m_scale = scale;
	}

protected:
	double m_frequency{ DEFAULT_FREQUENCY };

	double m_lacunarity{ DEFAULT_LACUNARITY };

	double m_persistence{ DEFAULT_PERSISTENCE };

	int m_octaveCount{ DEFAULT_OCTAVE_COUNT };

	noiseQuality_t m_quality{ DEFAULT_QUALITY };

	int m_seed{ DEFAULT_SEED };

	float m_bias{ 0.0f };

	float m_scale{ 1.0f };

};

}
